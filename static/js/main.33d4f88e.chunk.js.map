{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","Math","round","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.33d4f88e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <p className=\"title-container__subtitle\">Find out temperature conditions and more...</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\">Location:\r\n                <span className=\"weather__value\"> {props.country}, {props.city}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.temperature && <p className=\"weather__key\">Temperature:\r\n                <span className=\"weather__value\"> {props.temperature}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.humidity && <p className=\"weather__key\">Humidity:\r\n                <span className=\"weather__value\"> {props.humidity}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.description && <p className=\"weather__key\">Conditions:\r\n                <span className=\"weather__value\"> {props.description}</span>\r\n            </p>\r\n        }\r\n        {\r\n            props.error && <p className=\"weather__error\">{ props.error }</p>}\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\n\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst API_KEY = \"5a89a70d2e7de76c1abfa83d5bebd25d\"\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n    }\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&nits=metric`);\r\n        const data = await api_call.json();\r\n        console.log(data)\r\n        if (city && country) {\r\n            try {\r\n                this.setState({\r\n                    temperature: Math.round(data.main.temp - 273.15),\r\n                    city: data.name,\r\n                    country: data.sys.country,\r\n                    humidity: data.main.humidity,\r\n                    description: data.weather[0].description,\r\n                    error: \"\"\r\n                })\r\n            } catch(e) {\r\n                this.setState({\r\n                    temperature: undefined,\r\n                    city: undefined,\r\n                    country: undefined,\r\n                    humidity: undefined,\r\n                    description: undefined,\r\n                    error: \"City or country are not defined\"\r\n                })\r\n            }\r\n\r\n        } else {\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please enter the value.\"\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n          <div>\r\n              <div className= \"wrapper\">\r\n                  <div className=\"main\">\r\n                      <div className=\"container\">\r\n                          <div className=\"row\">\r\n                              <div className=\"col-xs-5 title-container\">\r\n                                  <Titles />\r\n                              </div>\r\n                              <div className=\"col-xs-7 form-container\">\r\n                                  <Form getWeather={this.getWeather}/>\r\n                                  <Weather\r\n                                      temperature={this.state.temperature}\r\n                                      city={this.state.city}\r\n                                      country={this.state.country}\r\n                                      humidity={this.state.humidity}\r\n                                      description={this.state.description}\r\n                                      error={this.state.error}\r\n                                  />\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n\r\n\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport  default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}